#-----CLASS v3.2.0 (branch: b'master', hash: b'6a24af048f500c7de34a7777c6cf935cb6ef8c6e')-----

#------Experiments to test (separated with commas)-----

data.experiments=['Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT','Planck_lensing']


#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 5]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list


data.parameters['omega_b']	= [2.222,  1.8, 2.6, 0.016, 0.01,'cosmo']
data.parameters['Omega_cdm'] 	= [0.25,0.15,0.35,0.1,1,'cosmo']
data.parameters['n_s']          = [0.9652,  0.8,1.1, 0.004, 1,   'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   1.61,3.4,0.5,    1, 'cosmo']
data.parameters['tau_reio']     = [0.078,  0.004,0.08, 0.0044,1,   'cosmo']
data.parameters['h'] = [0.7,0.5,0.8,0.1,1,'cosmo']

##axion mass
data.parameters['scf_parameters__1'] = [-23,-27,-23,1,1,'cosmo']
##axion initial velocity (fixed assuming slow roll)
data.parameters['scf_parameters__3'] = [0,0.,1,0,1,'cosmo']
##axion initial field value (will be shoot for)
data.parameters['scf_parameters__2'] = [0.1,0.,1,0,1,'cosmo']

##consider scf as a subcomponent of DM.
data.parameters['Omega_scf'] = [0.05,0,0.1,0.1,1,'cosmo']


# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']



#derived parameters
data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['100*theta_s']              = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1,   'derived']
data.parameters['age']          = [0, None, None, 0,     1,   'derived']
data.parameters['rs_rec']          = [0, None, None, 0,     1,   'derived']
data.parameters['rd_rec']          = [0, None, None, 0,     1,   'derived']
data.parameters['da_rec']          = [0, None, None, 0,     1,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_m']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']          = [0, None, None, 0,     1,   'derived']

data.parameters['n_L_lya']= [0, None, None, 0,   1,  'derived']
data.parameters['kp_lya']= [0, None, None, 0,   1,  'derived']
data.parameters['Delta_Lsquared_lya']= [0, None, None, 0,   1,  'derived']


data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless



#EDE parameters
data.cosmo_arguments['scf_potential'] = 'axionquad'
data.cosmo_arguments['scf_evolve_as_fluid'] = 'yes'
data.cosmo_arguments['scf_evolve_like_axionCAMB'] = 'yes'
data.cosmo_arguments['threshold_scf_fluid_m_over_H'] = 3
data.cosmo_arguments['do_shooting'] =  'yes'
data.cosmo_arguments['do_shooting_scf'] = 'yes'
data.cosmo_arguments['scf_has_perturbations'] = 'yes'
data.cosmo_arguments['use_big_theta_scf'] = 'no'
data.cosmo_arguments['use_delta_scf_over_1plusw'] = 'no'
data.cosmo_arguments['axionquad_mass_is_log10'] = 'yes'
data.cosmo_arguments['attractor_ic_scf'] = 'no'
data.cosmo_arguments['scf_tuning_index'] = 1
data.cosmo_arguments['compute damping scale'] = 'yes'
data.cosmo_arguments['get_lyman_alpha_tilt_and_amplitude'] = 'yes'
data.cosmo_arguments['include_scf_in_delta_m'] = 'yes'
data.cosmo_arguments['include_scf_in_delta_cb'] = 'no'
data.cosmo_arguments['include_scf_in_growth_factor'] = 'no'



# Other cosmo parameters (fixed parameters, precision parameters, etc.)
#data.cosmo_arguments['compute damping scale'] = 'yes'
data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['deg_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611
# Increase precision of cosmological parameter extraction to match CORE+ specifications
#data.cosmo_arguments['tol_background_integration'] = 1.e-3
#data.cosmo_arguments['tol_thermo_integration'] = 1.e-3
#data.cosmo_arguments['tol_perturb_integration'] = 1.e-6
#data.cosmo_arguments['reionization_optical_depth_tol'] = 1.e-5
#data.cosmo_arguments['l_logstep'] = 1.08
#data.cosmo_arguments['l_linstep'] = 25
#data.cosmo_arguments['perturb_sampling_stepsize'] = 0.04
#data.cosmo_arguments['delta_l_max'] = 1000
#data.cosmo_arguments['k_per_decade_for_pk'] = 100



# Include non-linear corrections from halofit
#data.cosmo_arguments['non_linear'] = 'halofit'

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
#data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['output'] = 'mPk tCl lCl pCl'
#data.cosmo_arguments['P_k_max_h/Mpc'] = 1
data.cosmo_arguments['P_k_max_1/Mpc'] = 2
data.cosmo_arguments['z_max_pk'] = 3.

#------ Mcmc parameters ----
#data.cosmo_arguments['input_verbose'] = 10
#data.cosmo_arguments['background_verbose'] = 10
#data.cosmo_arguments['fourier_verbose'] = 1
#data.cosmo_arguments['thermodynamics_verbose']=1
#data.cosmo_arguments['nonlinear_verbose'] = 1
data.N=20
data.write_step=5
